#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OnlineInstrumentStore.Models.DBObjects
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="OnlineInstrumentsStore")]
	public partial class OnlineInstrumentStoreDataContextDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertManufacturer(Manufacturer instance);
    partial void UpdateManufacturer(Manufacturer instance);
    partial void DeleteManufacturer(Manufacturer instance);
    partial void InsertInstrument(Instrument instance);
    partial void UpdateInstrument(Instrument instance);
    partial void DeleteInstrument(Instrument instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    #endregion
		
		public OnlineInstrumentStoreDataContextDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["OnlineInstrumentsStoreConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public OnlineInstrumentStoreDataContextDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OnlineInstrumentStoreDataContextDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OnlineInstrumentStoreDataContextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OnlineInstrumentStoreDataContextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<Manufacturer> Manufacturers
		{
			get
			{
				return this.GetTable<Manufacturer>();
			}
		}
		
		public System.Data.Linq.Table<Instrument> Instruments
		{
			get
			{
				return this.GetTable<Instrument>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Orders")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IDOrder;
		
		private System.Guid _IDCustomer;
		
		private string _DeliveryAdress;
		
		private System.Guid _IDInstrument;
		
		private int _Quantity;
		
		private System.DateTime _Date;
		
		private decimal _TotalPrice;
		
		private EntityRef<Instrument> _Instrument;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDOrderChanging(System.Guid value);
    partial void OnIDOrderChanged();
    partial void OnIDCustomerChanging(System.Guid value);
    partial void OnIDCustomerChanged();
    partial void OnDeliveryAdressChanging(string value);
    partial void OnDeliveryAdressChanged();
    partial void OnIDInstrumentChanging(System.Guid value);
    partial void OnIDInstrumentChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnTotalPriceChanging(decimal value);
    partial void OnTotalPriceChanged();
    #endregion
		
		public Order()
		{
			this._Instrument = default(EntityRef<Instrument>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDOrder", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IDOrder
		{
			get
			{
				return this._IDOrder;
			}
			set
			{
				if ((this._IDOrder != value))
				{
					this.OnIDOrderChanging(value);
					this.SendPropertyChanging();
					this._IDOrder = value;
					this.SendPropertyChanged("IDOrder");
					this.OnIDOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomer", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDCustomer
		{
			get
			{
				return this._IDCustomer;
			}
			set
			{
				if ((this._IDCustomer != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCustomerChanging(value);
					this.SendPropertyChanging();
					this._IDCustomer = value;
					this.SendPropertyChanged("IDCustomer");
					this.OnIDCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryAdress", DbType="VarChar(250)")]
		public string DeliveryAdress
		{
			get
			{
				return this._DeliveryAdress;
			}
			set
			{
				if ((this._DeliveryAdress != value))
				{
					this.OnDeliveryAdressChanging(value);
					this.SendPropertyChanging();
					this._DeliveryAdress = value;
					this.SendPropertyChanged("DeliveryAdress");
					this.OnDeliveryAdressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDInstrument", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDInstrument
		{
			get
			{
				return this._IDInstrument;
			}
			set
			{
				if ((this._IDInstrument != value))
				{
					if (this._Instrument.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDInstrumentChanging(value);
					this.SendPropertyChanging();
					this._IDInstrument = value;
					this.SendPropertyChanged("IDInstrument");
					this.OnIDInstrumentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPrice", DbType="Money NOT NULL")]
		public decimal TotalPrice
		{
			get
			{
				return this._TotalPrice;
			}
			set
			{
				if ((this._TotalPrice != value))
				{
					this.OnTotalPriceChanging(value);
					this.SendPropertyChanging();
					this._TotalPrice = value;
					this.SendPropertyChanged("TotalPrice");
					this.OnTotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Instrument_Order", Storage="_Instrument", ThisKey="IDInstrument", OtherKey="IDInstrument", IsForeignKey=true)]
		public Instrument Instrument
		{
			get
			{
				return this._Instrument.Entity;
			}
			set
			{
				Instrument previousValue = this._Instrument.Entity;
				if (((previousValue != value) 
							|| (this._Instrument.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Instrument.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Instrument.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._IDInstrument = value.IDInstrument;
					}
					else
					{
						this._IDInstrument = default(System.Guid);
					}
					this.SendPropertyChanged("Instrument");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Order", Storage="_Customer", ThisKey="IDCustomer", OtherKey="IDCustomer", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._IDCustomer = value.IDCustomer;
					}
					else
					{
						this._IDCustomer = default(System.Guid);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Manufacturer")]
	public partial class Manufacturer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IDManufacturer;
		
		private string _ManufacturerName;
		
		private EntitySet<Instrument> _Instruments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDManufacturerChanging(System.Guid value);
    partial void OnIDManufacturerChanged();
    partial void OnManufacturerNameChanging(string value);
    partial void OnManufacturerNameChanged();
    #endregion
		
		public Manufacturer()
		{
			this._Instruments = new EntitySet<Instrument>(new Action<Instrument>(this.attach_Instruments), new Action<Instrument>(this.detach_Instruments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDManufacturer", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IDManufacturer
		{
			get
			{
				return this._IDManufacturer;
			}
			set
			{
				if ((this._IDManufacturer != value))
				{
					this.OnIDManufacturerChanging(value);
					this.SendPropertyChanging();
					this._IDManufacturer = value;
					this.SendPropertyChanged("IDManufacturer");
					this.OnIDManufacturerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManufacturerName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ManufacturerName
		{
			get
			{
				return this._ManufacturerName;
			}
			set
			{
				if ((this._ManufacturerName != value))
				{
					this.OnManufacturerNameChanging(value);
					this.SendPropertyChanging();
					this._ManufacturerName = value;
					this.SendPropertyChanged("ManufacturerName");
					this.OnManufacturerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Manufacturer_Instrument", Storage="_Instruments", ThisKey="IDManufacturer", OtherKey="IDManufacturer")]
		public EntitySet<Instrument> Instruments
		{
			get
			{
				return this._Instruments;
			}
			set
			{
				this._Instruments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Instruments(Instrument entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = this;
		}
		
		private void detach_Instruments(Instrument entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Instrument")]
	public partial class Instrument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IDInstrument;
		
		private string _InstrumentName;
		
		private System.Guid _IDManufacturer;
		
		private string _InstrumentType;
		
		private string _Description;
		
		private decimal _Price;
		
		private EntitySet<Order> _Orders;
		
		private EntityRef<Manufacturer> _Manufacturer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDInstrumentChanging(System.Guid value);
    partial void OnIDInstrumentChanged();
    partial void OnInstrumentNameChanging(string value);
    partial void OnInstrumentNameChanged();
    partial void OnIDManufacturerChanging(System.Guid value);
    partial void OnIDManufacturerChanged();
    partial void OnInstrumentTypeChanging(string value);
    partial void OnInstrumentTypeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    #endregion
		
		public Instrument()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Manufacturer = default(EntityRef<Manufacturer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDInstrument", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IDInstrument
		{
			get
			{
				return this._IDInstrument;
			}
			set
			{
				if ((this._IDInstrument != value))
				{
					this.OnIDInstrumentChanging(value);
					this.SendPropertyChanging();
					this._IDInstrument = value;
					this.SendPropertyChanged("IDInstrument");
					this.OnIDInstrumentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstrumentName", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string InstrumentName
		{
			get
			{
				return this._InstrumentName;
			}
			set
			{
				if ((this._InstrumentName != value))
				{
					this.OnInstrumentNameChanging(value);
					this.SendPropertyChanging();
					this._InstrumentName = value;
					this.SendPropertyChanged("InstrumentName");
					this.OnInstrumentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDManufacturer", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDManufacturer
		{
			get
			{
				return this._IDManufacturer;
			}
			set
			{
				if ((this._IDManufacturer != value))
				{
					if (this._Manufacturer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDManufacturerChanging(value);
					this.SendPropertyChanging();
					this._IDManufacturer = value;
					this.SendPropertyChanged("IDManufacturer");
					this.OnIDManufacturerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstrumentType", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string InstrumentType
		{
			get
			{
				return this._InstrumentType;
			}
			set
			{
				if ((this._InstrumentType != value))
				{
					this.OnInstrumentTypeChanging(value);
					this.SendPropertyChanging();
					this._InstrumentType = value;
					this.SendPropertyChanged("InstrumentType");
					this.OnInstrumentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(1000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Instrument_Order", Storage="_Orders", ThisKey="IDInstrument", OtherKey="IDInstrument")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Manufacturer_Instrument", Storage="_Manufacturer", ThisKey="IDManufacturer", OtherKey="IDManufacturer", IsForeignKey=true)]
		public Manufacturer Manufacturer
		{
			get
			{
				return this._Manufacturer.Entity;
			}
			set
			{
				Manufacturer previousValue = this._Manufacturer.Entity;
				if (((previousValue != value) 
							|| (this._Manufacturer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Manufacturer.Entity = null;
						previousValue.Instruments.Remove(this);
					}
					this._Manufacturer.Entity = value;
					if ((value != null))
					{
						value.Instruments.Add(this);
						this._IDManufacturer = value.IDManufacturer;
					}
					else
					{
						this._IDManufacturer = default(System.Guid);
					}
					this.SendPropertyChanged("Manufacturer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Instrument = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Instrument = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IDCustomer;
		
		private string _CustomerName;
		
		private string _Email;
		
		private string _Address;
		
		private string _Phone;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCustomerChanging(System.Guid value);
    partial void OnIDCustomerChanged();
    partial void OnCustomerNameChanging(string value);
    partial void OnCustomerNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    #endregion
		
		public Customer()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomer", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IDCustomer
		{
			get
			{
				return this._IDCustomer;
			}
			set
			{
				if ((this._IDCustomer != value))
				{
					this.OnIDCustomerChanging(value);
					this.SendPropertyChanging();
					this._IDCustomer = value;
					this.SendPropertyChanged("IDCustomer");
					this.OnIDCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerName", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string CustomerName
		{
			get
			{
				return this._CustomerName;
			}
			set
			{
				if ((this._CustomerName != value))
				{
					this.OnCustomerNameChanging(value);
					this.SendPropertyChanging();
					this._CustomerName = value;
					this.SendPropertyChanged("CustomerName");
					this.OnCustomerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Order", Storage="_Orders", ThisKey="IDCustomer", OtherKey="IDCustomer")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
}
#pragma warning restore 1591
